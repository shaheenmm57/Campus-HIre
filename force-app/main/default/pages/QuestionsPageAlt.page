<apex:page controller="QuestionsPageCtrlAlt" showHeader="false" sidebar="false" standardStylesheets="false" applyHtmlTag="true">
    <html >
    <head>
        <link rel="preconnect" href="https://fonts.googleapis.com"/>
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="anonymous"/>
        <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@300&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,800;1,100;1,200;1,300;1,400;1,500;1,800&display=swap" rel="stylesheet"/>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/themes/prism.min.css" />
        <style>

            :root{
            --blue-color: #150958;
            --text-color: black;
            --background-color: white;
            --red-color: #EF233C;
            --icon-gray-color:#D9D9D9;

            --green-color: #539165;
            --blue-color-select: #534798;
            }
            *{
                margin: 0;
                padding: 0;
                font-family: 'Oswald', sans-serif; 
                font-family: 'Poppins', sans-serif;
                transition: none;
            }

          
            .main{
              height: 100vh; 
              width: 100%; 
              color: white;  
              overflow: hidden;
            }
            .header{
                height: 10vh;
                width: 100%;
                background: var(--blue-color);
                display: grid;
                place-items:center;
                grid-template-columns: 1fr 1fr 1fr; 
                color: white;
            }

            .novigo-icon{
                  height: 6vh; 
                  margin-left: 8px; 
            }

            .header-stopwatch-icon-container{
                display: flex;
                place-items:center;
            }

            .header-stopwatch-icon-container{
                font-size: 2rem;
                font-weight: 500;
            }

            .header-novigo-icon{
                display: grid;
                align-items: center;
                width: 100%;
                
            }


            .header-submit-icon-container{
                width: 100%;
                display: flex; 
                justify-content: right;
            }

            .header-submit-icon-container-btn{
                height: 6vh;
                background: var(--red-color);
                color: white;
                border: none;
                width: 12vw; 
                font-weight: 500;
                font-size: 1.2rem;
                border-radius: 5px;
                cursor: pointer;
                margin-right: 15px;
            }

            .header-submit-icon-container-btn:active{
                box-shadow: 0 0 10px black;
            }


            .main-body{
                display: grid;
                grid-template-columns: 1fr 2px 25vw;
                height: 90vh;
                width:100%;
                background: var(--blue-color);
            }


            /* .qst-nav-btn {
                display: grid;
                grid-template-columns: 1fr 1fr 1fr 1fr;
                place-items: center;
                border-radius: 10px;
                border: 4px solid gray;
                background: white;
            } */
            .qst-nav-btn{
                display: grid; 
                grid-template-rows: 1fr 1fr;
                place-items: center;
                height: 100%;
                grid-row-gap: 2.9px;
            }

            /* .qst-nav-btn-item{
               width: 5vw;
               height: 9vh;
               background: var(--icon-gray-color);
               border-radius: 10px;
               display: grid;
               place-items:center;
               border: 4px solid black;
                color: black;
                font-weight: 400;
                font-size: 1.2rem;
                cursor: pointer;
                transition: width 0.4s ease-in-out, background-color 0.4s ease-in-out;
                
            } */

            .qst-nav-btn-item{
                width: 5vw;
                height: 9vh;
                background: var(--icon-gray-color);
                border-radius: 10px;
                display: grid; 
                place-items:center;
                border: 4px solid black;
                color: black;
                font-weight: 400;
                font-size: 1.2rem;
                cursor: pointer;
                transition: width 0.4s ease-in-out, background-color 0.4s ease-in-out;
                
            }

            .main-body-line{
                background: #150958;
                height: 90vh;
                
            }


            .main-body-qst-container{  
                padding: 25px 25px 30px 25px;
                overflow: scroll;
                overflow-x: hidden; 
                border-radius: 10px;
                border: 4px solid gray;
                background: white;
            }

            .main-body-qst-container::-webkit-scrollbar{
                display: none;
            }

            .question-cnt-question-cnt{
                font-size: 1.5rem;
                display: flex;
                color: #150958;
                font-weight: 500;
            }

            .question-cnt-question-number{
                margin-left: 0.5rem;
            }
            .question-cnt-question-number-2, .question-cnt-question-cat{
                    margin-left: 1rem;
            }

            .question-cnt-title{
                margin-top: 0.5rem;
                font-size: 1.2rem;
                display: flex;
                color: black;
                font-weight: 500;
            }

            .question-cnt-options{
                display: grid;
                grid-template-columns: 1fr 1fr;
                grid-row-gap: 2vh;
                place-items:center;
                min-height: 30vh;
                margin-top: 10px;


            }

            .question-cnt-options-item{ 
                width: 30vw; 
                min-height: 8vh;
                border-radius: 10px;
                display: grid;
                grid-template-columns : 4vw 1fr; 
                background: #D9D9D9;
                color: black;
                cursor: pointer;
                border: 4px solid var(--blue-color);
                transition: width 0.4s ease-in-out, background-color 0.4s ease-in-out;
            }
            .question-cnt-options-item:active{
                box-shadow:  0 0 10px black;
            }

            .selected{
                background: var(--green-color);
                color: white;
            }

            


            .question-cnt-options-item-1, .question-cnt-options-item-2{
                   
                   display: grid;
                   place-items:center;
                   padding: 5px;
                   font-weight: 500;
                   font-size: 1.2rem; 
            }

            .question-cnt-options-item-1{
                border-top-left-radius: 5px;
                border-bottom-left-radius: 5px;
                max-height: 8vh;
            }

            .question-cnt-options-item-2{
                border-left: 4px solid var(--blue-color);
                border-top-right-radius: 5px;
                border-bottom-right-radius: 5px;
                padding: 0 5px;

            }

            .question-cnt-desc{
                     background: #f5f2f0;
                     display: grid;
                     place-items:left;
                     border-radius: 10px;
                     margin-top: 1.5vh;
                     padding: 20px;
            }

            .question-cnt-desc-pre{ 
                min-width: 40vw;
                max-width: 60vw;
                margin: 6vh 0  6vh 0;

            }

            .qst-nav-btn-item-answered{
                /* background-color: #009A19; */
                /* background-color: #1584bb; */
                background-color: var(--green-color);
                color: white;
            }

            .qst-nav-btn-item-current{
              border: 4px solid gray;
              /* background-color: #1584bb; */
              background-color: var(--blue-color-select);
              color: white; 
              font-weight: 500;
              font-size: 1.4rem;
            }

          

            .question-cnt-btn{
                width: 100%;
                display: grid;
                place-items:center;
                margin: 30px 10px ;
            }

            .question-cnt-btn-item{
                padding: 5px 10px;
                border-radius: 5px;
                background-color: var(--blue-color);
                color: white;
                display: grid;
                place-items:center;
                cursor: pointer;
                width: 10vw;
            }
            .question-cnt-btn-item:active{
                box-shadow: 0 0 10px black;
            }
            .question-cnt-btn-felx{
                display: flex;  
                justify-content: center;
                align-items: center;
                column-gap: 20px;
            }
 

               







               
                .loader {
                display: flex;
                justify-content: center;
                align-items: center;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: 9999;
                }
 

                .loader-logo{
                position: absolute;
                top: 50;
                left: 50;
                }



                .loader-logo .logo-section-one {
                    animation: moveOne 1.25s infinite alternate;
                }

                .loader-logo .logo-section-two {
                    animation: moveTwo 1.25s infinite alternate;
                }

                @keyframes moveOne {
                    0%, 100% {
                        fill: white;
                        transform: translate(-15px, -25px);
                        opacity: 0;
                        
                    }
                    50% {
                        fill: var(--red-color);
                        transform: translate(0, 0);
                        opacity: 1;
                    }
                }

                @keyframes moveTwo {
                    0%, 100% {
                        fill: white;
                        transform: translate(10px, 10px);
                        opacity: 0;
                    }
                    50% {
                        fill: var(--red-color);
                        transform: translate(0, 0);
                        opacity: 1;
                    }
                }


                .hidden {
                    display: none ;
                }






                  

 

                 .clear-btn{
                    display: grid;
                    justify-content: right;
                    align-items: center;
                 }
                 .clear-btn-item{
                    width: 15vw;
                    padding: 5px 10px;
                    background: rgb(218, 17, 17);
                    border-radius: 5px;
                    color: white;
                    display: grid;
                    place-items:center;
                    cursor: pointer;
                    margin-right: 10px;
                 }
                 .clear-btn-item:active{
                            box-shadow: 0 0 10px black;
                 }

                 .clear-active{
                    display: none;
                 }


 
                    .fullscreen-popup{
                        display: grid;
                        place-items:center;
                        height: 100vh;
                        width: 100%; 
                        background: rgba(15, 15, 15, 0.938);
                        position: absolute;
                    }

                    .start-fullscreen-popup-item{
                        height: 50vh;
                        width: 55vw;
                        display: grid;
                        place-items: center;
                        background: white;
                        border-radius: 10px;
                        grid-template-rows: 25vh 9vh 4vh 1fr;
                    }

                    .fullscreen-popup-item{
                        height: 65vh;
                        width: 55vw;
                        display: grid;
                        place-items: center;
                        background: white;
                        border-radius: 10px;
                        grid-template-rows: 40vh 9vh 4vh 1fr;
                    }
                    


                    .toggle-fullscreen{
                      width: 13vw;
                      height: 6vh;
                      background:#009a7d;
                      color: white;
                      display: grid;
                      place-items:center;
                      border-radius: 4px;
                      cursor: pointer;

                      
                    }
                    .toggle-fullscreen:active{
                        box-shadow: 0 0 10px black;
                    }

                    .fullscreen-popup-item-1{
                        font-size: 1.3rem;
                        color: rgb(218, 17, 17);
                        font-weight: 500;

                    }

                    .hide-popup{
                        display: none;
                    }

                    .fullscreen-count{
                         display: grid;
                         place-items:center;
                         
                    }
                    .fullscreen-count-num{ 
                             font-size: 4rem;
                             font-weight: 500;
                             color: var(--red-color);
                    }

                    .hide-count{
                        display: none;
                    }

                    .warning-cls{
                        font-size: 1.2rem;
                        font-weight: 600;
                        color: red;
                    }

                    .fullscreen-count-txt{
                      padding: 4vw 2vh;
                       width: 50vw;
                    }

                    .fullscreen-count-txt-high{
                       font-weight: 600; 
                    }

                    .fullscreen-count-txt-head{
                        font-size: 1.3rem;
                        color: rgb(199, 16, 16);
                        font-weight: 500;
                    }

                    .fullscreen-count-txt-head-sub{
                        margin-left: 2vw;
                        color: var(--blue-color);
                    }




                 .main-cnt-2-main{
                     position: absolute;
                     top: 0;
                     left: 0;
                     background: rgba(15, 15, 15, 0.938);
                     width: 100vw;
                     height: 100vh;
                     display: grid;
                     place-items:center;
                 }

              




                 .qnt-count , .qnt-count-txt{
                    color: #150958;
                    text-align: center;
                    margin-top: 10px;
                 }
                 .novig-icon-2-main{
                    display: grid;
                    place-items:center;
                    margin-bottom: -4vh;
                     
                 }

                 .novig-icon-2{

                    width: 25vw;
                    
                 }
                 .main-cnt-2{
                    height: 80vh;
                    width: 80vw;
                    background: white;
                    border-radius: 20px;  
                    display: grid;
                    place-items:center; 
                    grid-template-rows: 1fr 20vh 7vh 4vh 1fr;
                 }
                 .question-cnt-btn-2{
                    margin-top: -4vh;

                 }

                 .tick-icon{
                    display: grid;
                    place-items:center;
                     margin-top: -4vh;
                 }

                 .qnt-count{
                    font-size: 2rem;
                    font-weight: 600;
                 }
                 .qnt-count-sp{
                    color: #009A19;
                 }
                 .qnt-ount-sp-red{
                    color: #ff3b00;
                 }

                 .finish-color-green{
                    color: #009A19;
                    
                 }
                 .tick-mark-1,.tick-mark-2{
                    border: none;
                 }

                 .finish-color-red{
                    background: #ff3b00;
                    color: white;
                 }

                 .qnt-count-txt{
                    font-size: 1.2rem;
                    font-weight: 500;
                 }

                 .hide-tick{
                    display: none;
                 } 
            .main-body-full{
                animation-name: movePanel;
                animation-duration: 0.5s;
            }

            @keyframes movePanel{
                0%{
                    display: grid;
                    grid-template-columns: 1fr 2px 25vw;
                }
                100%{
                    display: none;
                    grid-template-columns: 1fr 0px 0vw;
                }
            }
            .main-body-full-alt{
                animation-name: movePanelAlt;
                animation-duration: 0.5s;
            }

            @keyframes movePanelAlt{
                0%{
                    grid-template-columns: 1fr 0px 0vw;
                }
                100%{
                    grid-template-columns: 1fr 2px 25vw;
                    
                }
            }

            .new-main-body{
                grid-template-columns: 1fr 0px 0vw;
            }

            .main-body-line-full{
               display: none;
            }

            .qst-nav-btn-full{

                /* display: none; */
            }

            .question-cnt-question-cnt-main{
                display: flex;
                justify-content: space-between
            }

            .toggle-icon{
                height: 7vh;
                cursor: pointer;
                border-radius: 50%; 
            }
            .toggle-icon:active{
                  box-shadow: 0 0 20px var(--blue-color);
            }

            .toggle-icon-cnt{
                height: 7vh;
                border-radius: 50%;
                margin-right: -22px;
                transition: 0.5s;


            }

            .toggle-icon-rotate{
                transform: rotate(180deg);
            }
            .header-stopwatch-cton-container-txt{
                margin-top: 6px;
            }

            .qst-nav-btn-split{
                display: grid;
                grid-template-columns: 1fr 1fr 1fr 1fr;
                place-items: center;
                height: 97.7%;
                width: 97%;
                border-radius: 10px;
                border: 4px solid gray;
                background: white;
            }

            .qst-nav-btn-item-logo{
                width: 5vw;
                height: 9vh;
                display: grid;
                place-items:center;
            }


            .main-cnt-3-main{
                     position: absolute;
                     top: 0;
                     left: 0;
                     background: rgba(15, 15, 15, 0.938);
                     width: 100vw;
                     height: 100vh;
                     display: grid;
                     place-items:center; 

            }

            .main-cnt-3{
                height: 80vh;
                width: 80vw;
                background: white;
                border-radius: 20px;  
                display: grid;
                place-items:center; 
            }

            .hide-finish{
                    display: none;
                 }

            .main-cnt-3-qnt-cnt{
                    overflow: scroll;
            }

            .question-cnt-btn-3{
                width: 100%;
                display: grid;
                place-items: center; 
            }

            .question-cnt-btn-3{
                height: 8vh;
            }

            .main-cnt-3-qnt-cnt{
                overflow: scroll;
                height: 64vh;
                width: 70vw; 
            }

            .main-cnt-3-qnt-cnt-head{
                height: 6vh;
                width: 70vw; 
                margin-top: 1vh;
            }

            .main-cnt-3-qnt-cnt::-webkit-scrollbar{
                display: none;
            }

            .main-cnt-3-qnt-cnt-item{
                display: grid;
                grid-template-columns: 1fr 1fr 1fr;
                background: #99fbd6;
                text-align: center;
                overflow: hidden;
                height: 5vh;
                margin-bottom: 1.5vh;
                font-weight: 500;
                font-size: 1.4rem;
                border-radius: 10px;
            }

            .main-cnt-3-qnt-cnt-item-head{
                display: grid;
                grid-template-columns: 1fr 1fr 1fr;
                 
                text-align: center;
                overflow: hidden;
                height: 5vh;
                margin-bottom: 1.5vh;
                font-weight: 500;
                font-size: 1.4rem;
                border-radius: 10px;
            }

            .main-cnt-3-qnt-cnt-item-red{
                 background: #fd8c8c;
                 display: grid;
                grid-template-columns: 1fr 1fr 1fr;
                 
                text-align: center;
                overflow: hidden;
                height: 5vh;
                margin-bottom: 1.5vh;
                font-weight: 500;
                font-size: 1.4rem;
                border-radius: 10px;
            }

            .main-cnt-3-qnt-cnt-item-check{
                display: grid;
                place-items:center;
            }

            .check-hide-true{
                display: none; 
            }
            .check-show-false{ 
                display: none;
            }

            /* .qst-num-logo{
                height: 100%;
                padding-top: 2px;
                padding-right: 2px;
            }

            .qst-num-logo-hide{
                display: none;
            }

            .qst-num{
                display: grid;  
                place-items: center;
                justify-content: right;
                margin-right: -26px;
            }
            .qst-num-hide{
                margin-right: 0;
            } */


            .qst-nav-btn-item-pin-logo{
                display: grid;
                place-items: center;
                grid-template-columns: 1fr 27px;
            }

            .qst-num-logo-hide{
                display: none;
            }

            .qst-flag-hide{
                display: none;
            }

            .flaged-qst{
                background: #ff8300;
            }



            .save-btn{
                display: grid;
                justify-content: right;
                align-items: center;
            }

            .save-btn-item{
                    width: 15vw;
                    padding: 5px 10px;
                    background: rgb(4, 112, 62);
                    border-radius: 5px;
                    color: white;
                    display: grid;
                    place-items:center;
                    cursor: pointer;
                    margin-right: 10px;
                 }
                 .save-btn-item:active{
                            box-shadow: 0 0 10px black;
                 }





         




                 
            /* new code end  */
            

        </style>
    </head>
    <body>
          
          <div class="loader hidden">
            <div class="loader-logo loader-logo-animation">
                <svg width="120" height="120" viewBox="0 0 61 51" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M30.8919 50.5334C33.472 46.3136 35.8983 42.4107 38.2198 38.4516C38.447 38.062 38.1813 37.2563 37.8911 36.7808C30.6681 24.8707 23.4241 12.9705 16.1242 1.10328C15.7781 0.541945 14.9355 0.0697652 14.2502 0.0565574C9.65982 -0.0325952 5.0659 0.0103303 0 0.0103303C10.3486 16.9361 20.5293 33.5845 30.8919 50.5334Z" fill="white"/>
                      <path class="logo-section-one" d="M21.9257 0.0785001C28.4739 10.7867 34.8054 21.135 41.3047 31.7607C43.8779 27.5738 46.3182 23.6643 48.6536 19.7053C48.8844 19.3123 48.6641 18.5133 48.3844 18.0444C44.9897 12.4146 41.567 6.80127 38.0743 1.22428C37.7422 0.692662 36.8996 0.137935 36.2843 0.124727C31.6869 0.0322727 27.0825 0.0751975 21.9257 0.0751975V0.0785001Z" fill="#EF233C"/>
                      <path class="logo-section-two" d="M60.6489 0.124756H45.0002C47.6293 4.4404 50.1395 8.56784 52.7965 12.9264C55.4326 8.62727 57.9394 4.54276 60.6489 0.124756Z" fill="#EF233C"/>
                 </svg>
              </div> 
        </div>


       <div class="main-cnt-2-main hide-finish">

       
                <div class="main-cnt-2"  > 
                    <div>
                        <div class="novig-icon-2-main">
                            <img class="novig-icon-2" src="{!URLFOR($Resource.novigo_logo_blue)}" alt="My PNG Image" />
                        </div>
                    </div>
                    <div class="tick-icon">
                        <iframe class="tick-mark-1 hide-tick"  src="https://lottie.host/?file=432f7734-967a-4583-bfb0-0865ebf2703b/KAB7XxpLX6.json"></iframe>
                        <iframe class="tick-mark-2 hide-tick"   src="https://lottie.host/?file=7ee787dd-73fc-43f1-be19-43d01965a799/jJdEDRvbT7.json"></iframe>
                    </div>
                <div class="qnt-count">You have attempted <span class="qnt-count-sp qnt-ount-sp-red"> 0/30</span>  questions.</div>
                <div class="qnt-count-txt">Your test responses have been recorded.</div>
                <div class="question-cnt-btn-2">
                    <div class="question-cnt-btn">
                        <div class="question-cnt-btn-felx">
                            <div class="question-cnt-btn-item" onclick="BackBtn()" >Go Back</div>
                            <div class="question-cnt-btn-item" onclick="PreviewTest()" style="background: #0029ff" >Preview</div>
                            <div class="question-cnt-btn-item finish-color-green finish-color-red" onclick="finishBtn()"   >Finish</div>
                        </div>
                    </div>
                </div>
            </div>

    </div>

    <div class="main-cnt-3-main hide-finish ">

       
            <div class="main-cnt-3"  > 
                
                <div class="main-cnt-3-qnt-cnt-head">
                    <div class="main-cnt-3-qnt-cnt-item-head">
                        <div>
                            Question Number
                        </div> 
                        <div>Category</div>
                        <div>Question Attempted</div>
                    </div>
                </div>
                <div class="main-cnt-3-qnt-cnt"> 
                </div> 
                <div class="question-cnt-btn-3">
                    <div class="question-cnt-btn-3">
                        <div class="question-cnt-btn-felx">
                            <div class="question-cnt-btn-item" onclick="BackBtnPreview()" >Go Back</div>
                            <div class="question-cnt-btn-item finish-color-green finish-color-red" onclick="finishBtn()"   >Finish</div>
                        </div>
                    </div>
                </div>
        </div>

    </div>






      <div class="fullscreen-popup ">
             <div class="start-fullscreen-popup-item">
                       <div class="fullscreen-count hide-count">
                        <iframe style="background: transparent;border: none" src="https://lottie.host/?file=57e696e7-fdf4-497e-94d3-ca9338d1bc48/ufNCPO8Xg4.json"></iframe>
                        <div class="fullscreen-count-num">10</div> 
                       </div>
                       <div class="fullscreen-count-txt">
                         <div class="fullscreen-count-txt-head">Warnings will be considered : </div>
                         <div class="fullscreen-count-txt-head-sub" ><span style="margin-left: 2px;margin-right: 3px">1.</span> <span style="margin-left:2px;"></span>  Attempt to exit <span class="fullscreen-count-txt-high">full screen</span></div>
                         <div class="fullscreen-count-txt-head-sub"><span style="margin-right: 3px">2.</span> When the page is forcefully <span class="fullscreen-count-txt-high">refreshed </span></div>
                         <div class="fullscreen-count-txt-head-sub" style="display:flex"><span style="margin-right: 7px; color:#ff3b00;">Note: </span><div> When <span class="fullscreen-count-txt-high">exiting fullscreen, if the warning timer</span> reaches 0 or if the warnings count becomes 0 test will<span> be <span class="fullscreen-count-txt-high">auto submited. </span> </span></div> </div>
                        </div>
                      <div class="fullscreen-popup-item-1" > &#x1F447;Please Enter back to  fullscreen </div>
                      <div class="fullscreen-popup-item-2"> you have <span class="warning-cls"></span> warnings left</div>
                      <div class="toggle-fullscreen">Enter Fullscreen</div>
             </div>
          </div>


        

          
          <div class="main" >

            
            <div class="header">
               <div  class="header-novigo-icon" >
                <img class="novigo-icon" src="{!URLFOR($Resource.novigo_logo)}" alt="My PNG Image" />
                 
                </div>
                
                <div class="header-stopwatch-icon-container">
                    <div> 
                        <img  src="{!URLFOR($Resource.stop_watch_icon)}" alt="My PNG Image" style="width: 40px; height: 40px;" />                                
                    </div>
                    <div  class="header-stopwatch-cton-container-txt" id="timer" > 00:00:00</div>
                </div>
                <div class="header-submit-icon-container" >
                    <!-- <button onclick="PreviewTest()" style="background: #0029ff" class="header-submit-icon-container-btn">Preview</button> -->
                    <button onclick="submitTest()" class="header-submit-icon-container-btn">Submit</button>
                </div>
            </div>

         <div class="main-body main-body-full-alt">
            <div class="main-body-qst-container"> 
                    <div class="question-cnt" style="color:black;">
                         <div class="question-cnt-question-cnt-main">
                            <div class="question-cnt-question-cnt" >
                                <div>Question</div> 
                                <div class="question-cnt-question-number"></div >
                                <div class="question-cnt-question-number-2">|</div> 
                                <div class="question-cnt-question-cat"></div>
                            </div>
                            <div style="margin-right:-32vw">
                                <img onclick="unflagqst()" id="flag-qst" class="qst-flag-hide" src="{!URLFOR($Resource.flag_icon)}" style="height:6vh;width:4vw;cursor: pointer;" alt="My PNG Image" />
                                <img onclick="flagqst()" id="un-flag-qst" src="{!URLFOR($Resource.flag_icon_fill)}" style="height:6vh;width:4vw;cursor: pointer;" alt="My PNG Image" />
                            </div>
                            <div class="toggle-icon-cnt"> 
                                <img onclick="toggleButtons()" class="toggle-icon" src="{!URLFOR($Resource.toggle_icon)}" alt="My PNG Image" />
                                
                            </div>
                         </div>
                         <div class="question-cnt-title">
                           
                         </div>
                         <div class="question-cnt-desc">
                            
                                
                         </div>
                         <div class="question-cnt-options">
                            <div class="question-cnt-options-item option_1" onclick="updateOption(event,'option_1')" > 
                                 <div class="question-cnt-options-item-1 option-A"></div>
                                 <div class="question-cnt-options-item-2 option-AO"></div>
                            </div>
                            <div class="question-cnt-options-item option_2" onclick="updateOption(event,'option_2')">
                                <div class="question-cnt-options-item-1 option-B"></div>
                                <div class="question-cnt-options-item-2 option-BO"></div>
                           </div>
                           <div class="question-cnt-options-item option_3" onclick="updateOption(event,'option_3')">
                                <div class="question-cnt-options-item-1 option-C"></div>
                                <div class="question-cnt-options-item-2 option-CO"></div>
                          </div>
                          <div class="question-cnt-options-item option_4" onclick="updateOption(event,'option_4')">
                            <div class="question-cnt-options-item-1 option-D"></div>
                            <div class="question-cnt-options-item-2 option-DO"></div>
                          </div>  
                         </div>
                    </div>
                    <div class="question-cnt-btn">
                        <div class="question-cnt-btn-felx">
                            <div class="question-cnt-btn-item prvbtnclick"  >Previous</div>
                            <div class="clear-btn clear-active">
                                <div class="clear-btn-item" onclick="clearselectionbtnclick()">Clear Selection</div>
                            </div>
                            <div class="save-btn ">
                                <div class="save-btn-item" onclick="SaveQuestion()">Save</div>
                            </div>
                            <div class="question-cnt-btn-item nextbtnclick"  >Next</div>
                        </div>
                        <!-- <div class="clear-btn clear-active">
                            <div class="clear-btn-item" onclick="clearselectionbtnclick()">Clear Selection</div>
                        </div> -->
                    </div>
                   
                   
            </div>
            <div class="main-body-line" ></div>
            <div class="qst-nav-btn">
                <div class="qst-nav-btn-split"> 
                    <div class="qst-nav-btn-item-logo">
                        <img  src="{!URLFOR($Resource.apti_logo)}" alt="My PNG Image" style="width:5vw;height:9vh;" />
                    </div>
                    <!-- <div class="qst-nav-btn-item">
                        <div class="qst-num qst-num-hide">
                            1
                        </div>
                        <span class="qst-num-logo qst-num-logo-hide">
                            <img  src="{!URLFOR($Resource.flag_icon)}" alt="My PNG Image" style="width:1.8rem;height:1.8rem;" />
                        </span>
                    </div> -->
                    <div class="qst-nav-btn-item">1</div>
                    <div class="qst-nav-btn-item">2</div>
                    <div class="qst-nav-btn-item">3</div>
                    <div class="qst-nav-btn-item">4</div>
                    <div class="qst-nav-btn-item">5</div>
                    <div class="qst-nav-btn-item">6</div>
                    <div class="qst-nav-btn-item">7</div>
                    <div class="qst-nav-btn-item">8</div>
                    <div class="qst-nav-btn-item">9</div>
                    <div class="qst-nav-btn-item">10</div>
                    <div class="qst-nav-btn-item">11</div>
                    <div class="qst-nav-btn-item">12</div>
                    <div class="qst-nav-btn-item">13</div>
                    <div class="qst-nav-btn-item">14</div>
                    <div class="qst-nav-btn-item">15</div>
                </div>
                <div class="qst-nav-btn-split"> 
                    <div class="qst-nav-btn-item-logo">
                        <img  src="{!URLFOR($Resource.c_logo)}" alt="My PNG Image" style="width:4vw;height:8vh;" />
                    </div>
                    <div class="qst-nav-btn-item">16</div>
                    <div class="qst-nav-btn-item">17</div>
                    <div class="qst-nav-btn-item">18</div>
                    <div class="qst-nav-btn-item">19</div>
                    <div class="qst-nav-btn-item">20</div> 
                    <div class="qst-nav-btn-item">21</div>
                    <div class="qst-nav-btn-item">22</div>
                    <div class="qst-nav-btn-item">23</div>
                    <div class="qst-nav-btn-item">24</div>
                    <div class="qst-nav-btn-item">25</div>
                    <div class="qst-nav-btn-item">26</div>
                    <div class="qst-nav-btn-item">27</div>
                    <div class="qst-nav-btn-item">28</div>
                    <div class="qst-nav-btn-item">29</div>
                    <div class="qst-nav-btn-item">30</div>  
                </div>
            </div>
         </div>

         <!-- <div id="element"> 
            <button   id="go-button">Enable Full Screen</button>
        </div> -->



       <!-- <div style="color:black"> 
        <button id="startButton" onclick="startTimer()">Start</button>
        <button id="stopButton" onclick="stopTimer()">Stop</button>
        <button id="resetButton" onclick="resetTimer()">Reset</button>
       </div> -->
             

   



        </div>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/prism.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/components/prism-c.min.js"></script>


        <script src="/soap/ajax/32.0/connection.js" type="text/javascript"/>
        <script src="/soap/ajax/32.0/apex.js" type="text/javascript"/>  
        <script>



                    function getUrlParameter(name) {
                                const urlParams = new URLSearchParams(window.location.search);
                                return urlParams.get(name);
                    }

                    // const studentIdMain = getUrlParameter('studentId');
                    // const eventIdMain = getUrlParameter('eventId');
                    const studentIdMain = 'a055j00000WjEpEAAV';
                    const eventIdMain = 'a025j00000fBPGgAAO';
                    if((!studentIdMain) || (!eventIdMain)){
                        var targetPageUrl = '/apex/studentLoginPageAlt';
                                window.location.href = targetPageUrl;
                    }



        function toggleButtons() {
            var mainele = document.querySelector('.main-body');
            mainele.classList.toggle('main-body-full');
            mainele.classList.toggle('main-body-full-alt');
            mainele.classList.toggle('new-main-body');
            var butonsele = document.querySelector(".qst-nav-btn");
            butonsele.classList.toggle('qst-nav-btn-full');
            // var lineele = document.querySelector(".main-body-line");
            // lineele.classList.toggle('main-body-line-full');
            var toggeIcon = document.querySelector('.toggle-icon-cnt');
            toggeIcon.classList.toggle('toggle-icon-rotate');
        }



                function showLoader() {
                    document.querySelector(".loader").classList.remove("hidden");
                }


                function hideLoader() {
                    document.querySelector(".loader").classList.add("hidden");
                }
            
              


            //fullscreen start 
            
            var student_test_isStarted = false;
            var student_test_warning = 6;
            
            
 
 
            // document.addEventListener('keydown', function(event) {
            // // console.log(event.key);
            
            // if (event.key === 'Alt' || event.key === 'Tab' || event.key === 'Meta' || event.key === 'Control' ||event.key === 'End' || event.key === 'F12' ) 
            // {
            //     document.exitFullscreen();
                 
            // }
            // else{
            //     // event.preventDefault();
            // }

            
            // }); 

            //  document.addEventListener('contextmenu', function (e) {
            //  e.preventDefault();
            //  });

            //  setInterval(function () {
            //  if (typeof console._commandLineAPI !== 'undefined') {
            //      console._commandLineAPI.clear();
            //      console._commandLineAPI.reset();
            //  }
            // }, 1000);




    
                
                 

               

                function log(message) { 
                }

        function requestFullScreen(element) {
            // Supports most browsers and their versions.
            var requestMethod = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullScreen;
        
            if (requestMethod) { // Native full screen.
            
                requestMethod.call(element);
            } else if (typeof window.ActiveXObject !== "undefined") { // Older IE.
                var wscript = new ActiveXObject("WScript.Shell");
                if (wscript !== null) {
                    wscript.SendKeys("{F11}");
                }
            }
        }

        var timerIntervalCounter;
        var countIntervel = 100000;
        const fullScreenElement = document.querySelector("html");

        function fullscreenchanged(event) {
             
            // document.fullscreenElement will point to the element that
            // is in fullscreen mode if there is one. If there isn't one,
            // the value of the property is null.
            if (document.fullscreenElement) {
                student_test_isStarted = true;
            } else {
            log("Leaving fullscreen mode.");

            var ele = document.querySelector(".fullscreen-popup");
                ele.classList.remove('hide-popup'); 
                ele = document.querySelector(".fullscreen-count");
                ele.classList.remove("hide-count");
                ele = document.querySelector(".fullscreen-count-txt");
                ele.classList.add("hide-count");
                beforePageRefresh(student_test_warning,false);
                


                countIntervel = 100000; 
                timerIntervalCounter = setInterval(() => {
                     countIntervel--; 
                    //  console.log('on load counter ' + countIntervel)
                     document.querySelector('.fullscreen-count-num').textContent = countIntervel;
                     if(countIntervel <= 0){ 
                                student_test_warning = 0;  
                                beforePageRefresh(student_test_warning,true);
                                clearInterval(timerIntervalCounter);
                     }
                }, 1000);

                student_test_warning = student_test_warning <= 0 ? 0 : student_test_warning - 1 ;
                
                if(student_test_warning <= 0){ 
                    // finishBtn();
                    updateOnsubmitandfinish();
                }
                if(student_test_isStarted){
                    document.querySelector('.start-fullscreen-popup-item').classList.add('fullscreen-popup-item');
                }
                var ele = document.querySelector(".warning-cls");
                ele.textContent = student_test_warning;  
            }
        }

        document.addEventListener("fullscreenchange", fullscreenchanged);
 
        document
            .querySelector(".toggle-fullscreen")
            .addEventListener("click", () => {
            if (document.fullscreenElement) {
                 
                // document.exitFullscreen();
                
            } else {
                var ele = document.querySelector(".fullscreen-popup");
                ele.classList.add('hide-popup');
                fullScreenElement.requestFullscreen();
                clearInterval(timerIntervalCounter);

            }
            });


            //fullscreen end


   



            var isQstAttemptedOption = false;
            
            function PreviewTest(){
                showLoader(); 
                fillPreview(val);
                
                    function fillPreview(result) { 
                            // console.log("success");  
                            // console.log(result);
                            var container = document.querySelector('.main-cnt-3-qnt-cnt');
                            container.innerHTML = '';

                            for (var i = 0; i < result.length; i++) {
                                var itemData = result[i];
                                var newItem = document.createElement('div');
                                if(itemData.is_attempted__c || itemData.is_attempted__c || (isQstAttemptedOption && itemData.currentQuestion__c)){
                                    newItem.classList.add('main-cnt-3-qnt-cnt-item');
                                }else{
                                    newItem.classList.add('main-cnt-3-qnt-cnt-item-red');
                                }

                                newItem.innerHTML = `
                                    <div>${itemData.question_number__c}</div>
                                    <div>${itemData.question_category__c}</div>
                                    <div class="main-cnt-3-qnt-cnt-item-check">
                                        <img  class="check-hide-${itemData.is_attempted__c || (isQstAttemptedOption && itemData.currentQuestion__c)}" src="{!URLFOR($Resource.unchecked_icon)}" alt="My PNG Image" style="width: 30px; height: 30px;" />
                                        <img  class="check-show-${itemData.is_attempted__c || (isQstAttemptedOption && itemData.currentQuestion__c)}" src="{!URLFOR($Resource.checked_icon)}" alt="My PNG Image" style="width: 30px; height: 30px;" />
                                    </div>
                                `;

                                container.appendChild(newItem);
                            }
                            hideLoader();
                            
                            if(result){

                            }

                            document.querySelector('.main-cnt-3-main').classList.remove('hide-finish');
                            
                        }
                                 
            }

            
           

            function submitTest() {

                showLoader();
                

                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.QuestionsPageCtrlAlt.GetQuestionCount}',
                                    studentIdMain, eventIdMain,
                                    function (result, event) { 
                                            // console.log("success");  
                                            // console.log(result);
                                            hideLoader();

                                            if(isQstAttemptedOption == true){
                                                result++;
                                            }

                                            document.querySelector('.main-cnt-2-main').classList.remove('hide-finish');
                                            
                                            var ele = document.querySelector(".qnt-count-sp");
                                            ele.classList.remove('qnt-ount-sp-red');
                                            ele.textContent = result + "/" + 30;
                                            ele = document.querySelector('.tick-mark-2');
                                            ele.classList.remove('hide-tick');
                                            ele = document.querySelector('.tick-mark-1');
                                            ele.classList.remove('hide-tick');
                                             if(result < 30){
                                                ele = document.querySelector(".qnt-count-sp"); 
                                                ele.classList.add('qnt-ount-sp-red');
                                                ele = document.querySelector('.tick-mark-1');
                                                ele.classList.add('hide-tick'); 
                                             }else{
                                                ele = document.querySelector('.tick-mark-2');
                                                ele.classList.add('hide-tick');

                                             }   
                                            if (event.status) {
                                                    // console.log(event.status);
                                                }
                                                else if (result.type === 'exception') {
                                                    alert("Exception caught");
                                                }
                                                else {
                                                    alert("Exception caught");
                                                }
                                        }
                                ); 

 
                
              
            }

            function BackBtn(){
                document.querySelector('.main-cnt-2-main').classList.add('hide-finish');
            }

            function BackBtnPreview(){
                document.querySelector('.main-cnt-3-main').classList.add('hide-finish');
            }


  //timer

                let timerInterval;
                let totalSeconds = 0; 

                function startTimer() {
                    timerInterval = setInterval(updateTimer, 1000);
                    // document.getElementById('startButton').disabled = true;
                }

                function stopTimer() {
                    clearInterval(timerInterval);
                    // document.getElementById('startButton').disabled = false;
                }

                function resetTimer() {
                    clearInterval(timerInterval);
                    totalSeconds = 0; // Reset to 5 minutes
                    updateTimer();
                    // document.getElementById('startButton').disabled = false;
                }

                var updateTimerInterval;

                function updateTimer() { 
                    if (totalSeconds <= 0) {
                        clearInterval(timerInterval);
                        clearInterval(updateTimerInterval); 
                        // document.getElementById('startButton').disabled = false;
                        var targetPageUrl = '/apex/TestSubmitScreen?studentId=' + studentIdMain + '&eventId=' + eventIdMain;
                        window.location.href = targetPageUrl;
                        return;
                    }

                    const hours = Math.floor(totalSeconds / 3600);
                    const minutes = Math.floor((totalSeconds % 3600) / 60);
                    const seconds = totalSeconds % 60;

                    const formattedHours = String(hours).padStart(2, '0');
                    const formattedMinutes = String(minutes).padStart(2, '0');
                    const formattedSeconds = String(seconds).padStart(2, '0');

                    document.getElementById('timer').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
                    totalSeconds--;
                }


                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.QuestionsPageCtrlAlt.GetCurrentTimer}',
                                    studentIdMain,eventIdMain,
                                    function (result, event) { 
                                            // console.log("GetCurrentTimer success");     
                                            totalSeconds = result;
                                            if(totalSeconds <= 0){
                                                var targetPageUrl = '/apex/TestSubmitScreen?studentId=' + studentIdMain + '&eventId=' + eventIdMain;
                                                window.location.href = targetPageUrl;
                                            }
                                            startTimer();
                                                if (event.status) {
                                                    // console.log(event.status);
                                                }
                                                else if (result.type === 'exception') {
                                                    alert("Exception caught");
                                                }
                                                else {
                                                    alert("Exception caught");
                                                }
                                        }
                                );
                                
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.QuestionsPageCtrlAlt.GetCurrentStudentSession}',
                                    studentIdMain,eventIdMain,
                                    function (result, event) { 
                                            // console.log("GetCurrentStudentSession success");     
                                            // console.log(result);
                                            student_test_isStarted = result.student_test_isStarted__c;
                                            student_test_warning = result.student_test_warning__c;
                                            if( student_test_warning <= 0){
                                                // finishBtn();

                                                updateOnsubmitandfinish();
                                            }
                                            
                                            var ele = document.querySelector(".warning-cls");
                                            ele.textContent = student_test_warning;

                                            if(student_test_isStarted == true){
                                                document.querySelector('.start-fullscreen-popup-item').classList.add('fullscreen-popup-item');
                                                var ele = document.querySelector(".fullscreen-count");
                                                ele.classList.remove("hide-count");
                                                ele = document.querySelector(".fullscreen-count-txt");
                                                ele.classList.add("hide-count");
                                                timerIntervalCounter = setInterval(() => {
                                                    countIntervel--;
                                                    // console.log('on load counter ' + countIntervel); 
                                                    document.querySelector('.fullscreen-count-num').textContent = countIntervel;
                                                    if(countIntervel <= 0){
                                                        student_test_warning = 0;
                                                        beforePageRefresh(student_test_warning,true); 
                                                        clearInterval(timerIntervalCounter);
                                                        // finishBtn();
                                                        // updateOnsubmitandfinish();
                                                        
                                                    }
                                                }, 1000);
                                            }
                                            else{
                                                student_test_isStarted = true;
                                            } 
                                                if (event.status) {
                                                    // console.log(event.status);
                                                }
                                                else if (result.type === 'exception') {
                                                    alert("Exception caught");
                                                }
                                                else {
                                                    alert("Exception caught");
                                                }
                                        }
                                ); 

                var isSubmitedQuestion = false;

                var updateTimerInterval =  setInterval(() => { 
                     if(isSubmitedQuestion === true){
                        totalSeconds = 0;
                     }
                     Visualforce.remoting.Manager.invokeAction(
                                     '{!$RemoteAction.QuestionsPageCtrlAlt.UpdateCurrentTimer}',
                                     totalSeconds,studentIdMain,eventIdMain,true,student_test_warning,
                                     function (result, event) { 
                                            //  console.log("success");   
                                                 if (event.status) {
                                                    //  console.log(event.status);
                                                 }
                                                 else if (result.type === 'exception') {
                                                     alert("Exception caught");
                                                 }
                                                 else {
                                                     alert("Exception caught");
                                                 }
                                         }
                                 ); 
                    //  console.log(totalSeconds)
                 }, 60000);


                 function beforePageRefresh(student_test_warning,isTimerOut) {
                    // console.log("before refresh");
                    if(isSubmitedQuestion === true){
                        totalSeconds = 0;
                    }
                    student_test_warning_update = student_test_warning <= 0 ? 0 : student_test_warning - 1 ; 
                    // console.log('student test warning ' + student_test_warning_update); 
                       Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.QuestionsPageCtrlAlt.UpdateCurrentTimer}',
                                    totalSeconds,studentIdMain,eventIdMain,true,student_test_warning_update,
                                    function (result, event) { 
                                            // console.log("UpdateCurrentTimer success");
                                            if(isTimerOut == true){
                                                // finishBtn();
                                                updateOnsubmitandfinish();
                                            }   
                                                if (event.status) {
                                                    // console.log(event.status);
                                                }
                                                else if (result.type === 'exception') {
                                                    alert("Exception caught");
                                                }
                                                else {
                                                    alert("Exception caught");
                                                }
                                        }
                                ); 
                         
                    }


                 window.addEventListener('beforeunload', function(event) { 
                     
                       beforePageRefresh(student_test_warning,false);  
                });

                  



                //timer


                var val = [];

                showLoader();

                Prism.highlightAll(); 

                


                var isQstAttempted = false;
                var studentAnswer='';
                var questionId = ''; 



                function updateOnsubmitandfinish(){
                          showLoader();   
                        var selectedQuestion; 
                        
                        navBtns.forEach(function(navbtn) {
                            if(navbtn.classList.contains('qst-nav-btn-item-current')){
                                var getStudentId = val.find(function(question){
                                    return question.question_number__c === (parseInt(navbtn.textContent));
                                })
                                questionId = getStudentId.Id;
                                selectedQuestion = getStudentId;
                            }
                        });

                        if(!selectedQuestion){
                            var targetPageUrl = '/apex/TestSubmitScreen?studentId=' + studentIdMain + '&eventId=' + eventIdMain;
                            window.location.href = targetPageUrl;
                            return;
                        }

                          

                        Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.QuestionsPageCtrlAlt.updateCurrentQuestion}',
                                    selectedQuestion.question_number__c ,studentAnswer,questionId,isQstAttempted,studentIdMain,eventIdMain,
                                    function (result, event) { 
                                            // console.log("updateCurrentQuestion success");
                                            initData(result);
                                            val = result;
                                            
                                            
                                            


                                            Visualforce.remoting.Manager.invokeAction(
                                                    '{!$RemoteAction.QuestionsPageCtrlAlt.updateTestMarks}',
                                                    studentIdMain, eventIdMain,
                                                    function (result, event) { 
                                                            // console.log("updateTestMarks success");  
                                                            // console.log(result);
                                                            hideLoader();
                                                            
                                                            if(result === true)
                                                            {

                                                                var targetPageUrl = '/apex/TestSubmitScreen?studentId=' + studentIdMain + '&eventId=' + eventIdMain;
                                                                window.location.href = targetPageUrl;
                                                                // var navbuttons = document.querySelector(".question-cnt-btn-felx");
                                                                // navbuttons.classList.toggle("hide-tick");
                                                            }
                                                            else{
                                                                window.alert("Something went wrong");
                                                            }
                                                            if (event.status) {
                                                                    // console.log(event.status);
                                                                }
                                                                else if (result.type === 'exception') {
                                                                    alert("Exception caught");
                                                                }
                                                                else {
                                                                    alert("Exception caught");
                                                                }
                                                        }
                                                );  
                                             
                                                
                                                if (event.status) {
                                                    // console.log(event.status);
                                                }
                                                else if (result.type === 'exception') {
                                                    alert("Exception caught");
                                                }
                                                else {
                                                    alert("Exception caught");
                                                }
                                        }
                                ); 
                                studentAnswer = '';
                                questionId  = '';
                                isQstAttempted = false;

             }
                  




                            //load first and current question start  
        function initData(val){

            // console.log('initData 1  : isQstAttempted ='+isQstAttempted + '   studentAnswer =' +studentAnswer + 'questionId ='+questionId  );
                console.log(val);
               var optionAll = document.querySelectorAll('.question-cnt-options-item');
                optionAll.forEach(function(opt){
                    opt.classList.remove('selected');
                });

                var clearele = document.querySelector('.clear-btn');
                clearele.classList.remove('clear-active');
                clearele.classList.add('clear-active');

                
                
                
                var question_ele;
                var navBtnContainer = document.querySelector('.qst-nav-btn');
                var navBtns = navBtnContainer.querySelectorAll('.qst-nav-btn-item');
                
               

                 navBtns.forEach(function(navbtn){

                 });



  





                 var selectedQuestion;
                 for(var i = 0;i < val.length ; i++){
                    if(val[i].currentQuestion__c === true)
                       selectedQuestion = val[i];
                 }



                                navBtns.forEach(function(navbtn) {
                                    navbtn.classList.remove('qst-nav-btn-item-current');
                                    if( parseInt(navbtn.textContent) == selectedQuestion.question_number__c  ){
                                        navbtn.classList.add('qst-nav-btn-item-current');
                                    }
                                });


                           
                            

                                navBtns.forEach(function(navbtn) {
                                    for(var i = 0;i<val.length;i++){
                                        if(parseInt(navbtn.textContent) === val[i].question_number__c){
                                            if(val[i].is_attempted__c == true){ 
                                                navbtn.classList.add('qst-nav-btn-item-answered');
                                            }else if(val[i].is_attempted__c == false){
                                                navbtn.classList.remove('qst-nav-btn-item-answered');
                                            }
                                        } 
                                    }
                                });
                            

                            question_ele = document.querySelector('.question-cnt-question-number');
                            question_ele.innerHTML  = selectedQuestion.question_number__c;
                            question_ele = document.querySelector('.question-cnt-question-cat');
                            if(selectedQuestion.question_category__c === 'c programming'){
                                question_ele.innerHTML  = 'C-Programming';
                            }else{
                                question_ele.innerHTML  = selectedQuestion.question_category__c;
                            }
                             
                            question_ele = document.querySelector('.question-cnt-title');
                            question_ele.innerHTML  = selectedQuestion.question_title__c ;



                            function formatTextToHTML(text) {
                                        // Split the input text into lines
                                        const lines = text.split('\n');

                                        // Create an array to hold formatted lines
                                        const formattedLines = [];

                                        // Iterate through the lines and format each one
                                        for (const line of lines) {
                                            // Split each line into words
                                            const words = line.split(' ');

                                            // Create an array to hold formatted words
                                            const formattedWords = [];

                                            // Iterate through the words and format each one
                                            for (const word of words) {
                                                // Escape HTML entities to prevent HTML injection
                                                const escapedWord = escapeHTML(word);

                                                // Add the formatted word to the array
                                                formattedWords.push(escapedWord);
                                            }

                                            // Join the formatted words with spaces
                                            const formattedLine = formattedWords.join(' ');

                                            // Add the formatted line to the array
                                            formattedLines.push(formattedLine);
                                        }

                                        // Join the formatted lines with line breaks
                                        const formattedText = formattedLines.join('<br>');

                                        // Return the formatted HTML text
                                        return formattedText;
                                    }

                                    // Helper function to escape HTML entities
                                    function escapeHTML(text) {
                                        const div = document.createElement('div');
                                        div.textContent = text;
                                        return div.innerHTML;
                                    }

                            if(selectedQuestion.question_description__c){
                            var question_ele_1 = document.querySelector('.question-cnt-desc');
                            question_ele_1.style.display = 'grid';
                            if(selectedQuestion.question_category__c.toLowerCase() == 'c programming'){
                                if(selectedQuestion.hasProgram__c == true){
                                            var question_ele = document.querySelector('.question-cnt-desc');
                                        while (question_ele.firstChild) {
                                            question_ele.removeChild(question_ele.firstChild);
                                        }
                                        
                                        if (!question_ele.querySelector('pre')) {
                                            var preElement = document.createElement('pre');
                                            preElement.className = 'question-cnt-desc-pre';
                                            var codeElement = document.createElement('code');
                                            codeElement.className = 'language-c'; 
                                            preElement.appendChild(codeElement);  
                                            question_ele.appendChild(preElement); 
                                        } 

                                        question_ele.querySelector('code').innerHTML = selectedQuestion.question_description__c;
                                        Prism.highlightAll();
                                }else{
                                    question_ele = document.querySelector('.question-cnt-desc');
                                    while (question_ele.firstChild) {
                                        question_ele.removeChild(question_ele.firstChild);
                                    }
                                    const formattedHTML = formatTextToHTML(selectedQuestion.question_description__c);
                                    question_ele.innerHTML = formattedHTML; 
  
                                } 
                                // console.log(codeContent);
                            }
                            else{ 
                                question_ele = document.querySelector('.question-cnt-desc');
                                while (question_ele.firstChild) {
                                    question_ele.removeChild(question_ele.firstChild);
                                }  
                                const formattedHTML = formatTextToHTML(selectedQuestion.question_description__c); 
                                question_ele.innerHTML = formattedHTML; 
                            }

                        }else{
                            var question_ele = document.querySelector('.question-cnt-desc');
                            question_ele.style.display = 'none';
                        }
                        
                            function updateOptionOnLoad(ele,selectedOption) { 
                                var optionAll = document.querySelectorAll('.question-cnt-options-item');
                                optionAll.forEach(function(opt){
                                    opt.classList.remove('selected');
                                });
                                ele.classList.add('selected');
                                studentAnswer = selectedOption;
                                isQstAttempted = true;

                            }


                            if(selectedQuestion.is_attempted__c == true){
                                // isQstAttemptedOption = true;
                                if(selectedQuestion.student_attempt__c == 'option_1'){
                                    question_ele = document.querySelector('.option_1') 
                                    updateOptionOnLoad(question_ele,'option_1');
                                }else if(selectedQuestion.student_attempt__c == 'option_2'){
                                    question_ele = document.querySelector('.option_2') 
                                    updateOptionOnLoad(question_ele,'option_2');
                                }if(selectedQuestion.student_attempt__c == 'option_3'){
                                    question_ele = document.querySelector('.option_3') 
                                    updateOptionOnLoad(question_ele,'option_3');
                                }if(selectedQuestion.student_attempt__c == 'option_4'){
                                    question_ele = document.querySelector('.option_4') 
                                    updateOptionOnLoad(question_ele,'option_4');
                                }
                                var clearele = document.querySelector('.clear-btn');
                                clearele.classList.remove('clear-active');
                            }else{
                                isQstAttemptedOption = false;
                            }

                            // console.log('initData 2 : isQstAttempted ='+isQstAttempted + '   studentAnswer = ' +studentAnswer + '   questionId ='+questionId  );
                            
                            question_ele = document.querySelector('.option-AO');
                            question_ele.innerHTML  = selectedQuestion.option_1__c;
                            question_ele = document.querySelector('.option-A');
                            question_ele.innerHTML = 'A';
                            question_ele = document.querySelector('.option-BO');
                            question_ele.innerHTML  = selectedQuestion.option_2__c;
                            question_ele = document.querySelector('.option-B');
                            question_ele.innerHTML = 'B';
                            question_ele = document.querySelector('.option-CO');
                            question_ele.innerHTML  = selectedQuestion.option_3__c;
                            question_ele = document.querySelector('.option-C');
                            question_ele.innerHTML = 'C';
                            question_ele = document.querySelector('.option-DO');
                            question_ele.innerHTML  = selectedQuestion.option_4__c;
                            question_ele = document.querySelector('.option-D');
                            question_ele.innerHTML = 'D';





                            
                            

                            
  

                }
                
                //load first and current question end 

                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.QuestionsPageCtrlAlt.GetInitialData}',
                                    studentIdMain,eventIdMain,
                                    function (result, event) { 
                                            // console.log("success");    
                                                hideLoader();  
                                                initData(result);
                                                val = result;
                                                if (event.status) {
                                                    // console.log(event.status);
                                                }
                                                else if (result.type === 'exception') {
                                                    alert("Exception caught");
                                                }
                                                else {
                                                    alert("Exception caught");
                                                }
                                        }
                                ); 



         













            function clearselectionbtnclick(){
                          showLoader();   
                          isQstAttemptedOption = false;
                        var selectedQuestion; 
                        navBtns.forEach(function(navbtn) {
                            if(navbtn.classList.contains('qst-nav-btn-item-current')){
                                var getStudentId = val.find(function(question){
                                    return question.question_number__c === (parseInt(navbtn.textContent));
                                })
                                questionId = getStudentId.Id;
                                selectedQuestion = getStudentId;
                            }
                        });

                        Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.QuestionsPageCtrlAlt.updateCurrentQuestion}',
                                    selectedQuestion.question_number__c,'',questionId,false,studentIdMain,eventIdMain,
                                    function (result, event) { 
                                            // console.log("success");
                                            initData(result);
                                            val = result;
                                            hideLoader(); 
                                             
                                                
                                                if (event.status) {
                                                    // console.log(event.status);
                                                }
                                                else if (result.type === 'exception') {
                                                    alert("Exception caught");
                                                }
                                                else {
                                                    alert("Exception caught");
                                                }
                                        }
                                ); 
                                studentAnswer = '';
                                questionId  = '';
                                isQstAttempted = false;

             }

            function updateOption(event,selectedOption) { 
                    isQstAttemptedOption = true;
                    const parentDiv = event.currentTarget;
                    var optionAll = document.querySelectorAll('.question-cnt-options-item');
                    optionAll.forEach(function(opt){
                        opt.classList.remove('selected');
                    });
                    parentDiv.classList.add('selected');
                    studentAnswer = selectedOption;
                    isQstAttempted = true;
                    var clearele = document.querySelector('.clear-btn');
                    clearele.classList.remove('clear-active');

            }

            
            var nextbtnele = document.querySelector('.nextbtnclick');
            var prvbtnele = document.querySelector('.prvbtnclick');

            function disableNextPrv(par){
                if(par == 2){
                    prvbtnele.style.display = 'none'; 
                }else if(par == 29){
                    nextbtnele.style.display = 'none'; 
                }else{
                    prvbtnele.style.display = 'grid';
                    nextbtnele.style.display = 'grid';

                }
            }


            
               
         


          
          
              // on next button click start

              

             var nextbtnele = document.querySelector('.nextbtnclick');
               nextbtnele.addEventListener('click', function(){ 

                // console.log('next btn');

                showLoader(); 

                var navBtnNextPrv = document.querySelector('.qst-nav-btn');
                var navBtnNextPrvAll = navBtnNextPrv.querySelectorAll('.qst-nav-btn-item');  
                var flag = 0;
                navBtnNextPrvAll.forEach(function(btn){
                        if( flag === 0 && btn.classList.contains('qst-nav-btn-item-current') ){
                            flag = 1;  
                            
                                        // console.log(parseInt(btn.textContent));
                                var getStudentId = val.find(function(question){
                                    return question.question_number__c === (parseInt(btn.textContent));
                                })
                                questionId = getStudentId.Id;
                                var selectedQuestion = val.find(function(question){
                                    return question.question_number__c  === (parseInt(btn.textContent));
                                })
                                if(parseInt(btn.textContent) != 30){ 
                                    selectedQuestion = val.find(function(question) {
                                        return question.question_number__c  === (parseInt(btn.textContent) + 1);
                                    });  


                                            Visualforce.remoting.Manager.invokeAction(
                                                        '{!$RemoteAction.QuestionsPageCtrlAlt.updateCurrentQuestion}',
                                                        selectedQuestion.question_number__c,studentAnswer,questionId,isQstAttempted,studentIdMain,eventIdMain,
                                                        function (result, event) { 
                                                                // console.log("success");
                                                                // location.reload();
                                                                initData(result);
                                                                val = result;
                                                                hideLoader();
                                                                    if (event.status) {
                                                                        // console.log(event.status);
                                                                    }
                                                                    else if (result.type === 'exception') {
                                                                        alert("Exception caught");
                                                                    }
                                                                    else {
                                                                        alert("Exception caught");
                                                                    }
                                                            }
                                                    );
                                                    studentAnswer = '';
                                                    questionId  = '';
                                                    isQstAttempted = false;  

                            }else{
                                hideLoader();
                            }
 
                        } 
                        
                    })
                    
                        
               });




             // prv btn  down
               var prvbtnele = document.querySelector('.prvbtnclick');
               prvbtnele.addEventListener('click', function(){ 

                // console.log('prv btn');

                showLoader(); 

                var navBtnNextPrv = document.querySelector('.qst-nav-btn');
                var navBtnNextPrvAll = navBtnNextPrv.querySelectorAll('.qst-nav-btn-item');  
                var flag = 0;
                navBtnNextPrvAll.forEach(function(btn){
                        if( flag === 0 && btn.classList.contains('qst-nav-btn-item-current') ){
                            flag = 1;  
                            
                                        // console.log(parseInt(btn.textContent));

                                        var getStudentId = val.find(function(question){
                                            return question.question_number__c === (parseInt(btn.textContent));
                                        })
                                        questionId = getStudentId.Id;
                                var selectedOption = val.find(function(question){
                                    return question.question_number__c  === (parseInt(btn.textContent));
                                })

                                 if(parseInt(btn.textContent) != 1){
                                            selectedQuestion = val.find(function(question) {
                                            return question.question_number__c  === (parseInt(btn.textContent) - 1);
                                        });  


                                        Visualforce.remoting.Manager.invokeAction(
                                                    '{!$RemoteAction.QuestionsPageCtrlAlt.updateCurrentQuestion}',
                                                    selectedQuestion.question_number__c,studentAnswer,questionId,isQstAttempted,studentIdMain,eventIdMain,
                                                    function (result, event) { 
                                                            // console.log("success");
                                                            initData(result);
                                                            val = result;
                                                            hideLoader();
                                                                
                                                                if (event.status) {
                                                                    // console.log(event.status);
                                                                }
                                                                else if (result.type === 'exception') {
                                                                    alert("Exception caught");
                                                                }
                                                                else {
                                                                    alert("Exception caught");
                                                                }
                                                        }
                                                );

                                                studentAnswer = '';
                                                questionId  = '';
                                                isQstAttempted = false;
                                 }else{
                                    hideLoader();
                                 }

                        
                                    
                          
                        }
                    })      
                        
               });


         
               
                  


              //on next button click end





              var navBtnContainer = document.querySelector('.qst-nav-btn');
             var navBtns = navBtnContainer.querySelectorAll('.qst-nav-btn-item');

            var qstnButtons = document.querySelectorAll('.qst-nav-btn-item');
            qstnButtons.forEach(function(button) {
                button.addEventListener('click', function(event) {

                    isQstAttemptedOption = false;

                    // console.log('click btn');
                    showLoader(); 


                    var number = parseInt(event.currentTarget.textContent) ;
                     
                    
                    // console.log("Button clicked with number:", number);
                    var selectedQuestion = val.find(function(question) {
                        return question.question_number__c === number;
                    }); 
                    

                    navBtns.forEach(function(navbtn) { 
                        document.querySelector("#flag-qst").classList.add('qst-flag-hide');
                        document.querySelector("#un-flag-qst").classList.remove('qst-flag-hide');
                        if(navbtn.classList.contains('qst-nav-btn-item-current')){
                            var getStudentId = val.find(function(question){
                                return question.question_number__c === (parseInt(navbtn.textContent));
                            })
                            questionId = getStudentId.Id;
                        }
                    });

                    // console.log('onClickbutton    : isQstAttempted ='+isQstAttempted + '   studentAnswer =' +studentAnswer + '   questionId ='+questionId  );

                    Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.QuestionsPageCtrlAlt.updateCurrentQuestion}',
                                selectedQuestion.question_number__c,studentAnswer,questionId,isQstAttempted,studentIdMain,eventIdMain,
                                function (result, event) { 
                                        //    console.log("success");
                                           initData(result);
                                           val = result;
                                           hideLoader();
                                            
                                            if (event.status) {
                                                // console.log(event.status);
                                            }
                                            else if (result.type === 'exception') {
                                                alert("Exception caught");
                                            }
                                            else {
                                                alert("Exception caught");
                                            }
                                    }
                            );
                            studentAnswer = '';
                            questionId  = '';
                            isQstAttempted = false;  
                });
            });

             

            function finishBtn(){
                isSubmitedQuestion = true;
                updateOnsubmitandfinish();  
             
          }


          function unflagqst(){
            var navBtnContainer = document.querySelector('.qst-nav-btn');
             var navBtns = navBtnContainer.querySelectorAll('.qst-nav-btn-item');
             for( var i =0;i<val.length;i++){ 
                if(val[i].currentQuestion__c){
                    navBtns.forEach(function(navbtn) {
                           if(parseInt(navbtn.textContent) == val[i].question_number__c){
                                navbtn.classList.remove("flaged-qst");
                           }
                        });
                }

             }
            


            document.querySelector("#flag-qst").classList.add('qst-flag-hide');
            document.querySelector("#un-flag-qst").classList.remove('qst-flag-hide');

          }

          function flagqst(){
            var navBtnContainer = document.querySelector('.qst-nav-btn');
             var navBtns = navBtnContainer.querySelectorAll('.qst-nav-btn-item');
             for( var i =0;i<val.length;i++){ 
                if(val[i].currentQuestion__c){
                    navBtns.forEach(function(navbtn) {
                           if(parseInt(navbtn.textContent) == val[i].question_number__c){
                                navbtn.classList.add("flaged-qst");
                           }
                        });
                }

             }
            
            document.querySelector("#flag-qst").classList.remove('qst-flag-hide');
            document.querySelector("#un-flag-qst").classList.add('qst-flag-hide');
          }


          




        </script> 
         
    </body>
    </html>
</apex:page>